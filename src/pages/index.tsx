import type { NextPage } from "next";
import Head from "next/head";
import { trpc } from "../utils/trpc";

const Home: NextPage = () => {
  const hello = trpc.useQuery(["author.hello", { text: "from tRPC" }]);
  const authors = trpc.useQuery(["author.getAll"]);
  const books = trpc.useQuery(["book.getAll"]);
  const createBook = trpc.useMutation(["book.create"]);
  const createAuthor = trpc.useMutation(["author.create"]);

  const helloText = hello.data?.greeting || "Loading...";

  const addNewBook = () =>
    createBook
      .mutateAsync({
        title: `Random Book ${Math.floor(Math.random() * 500) + 1}`,
        createdAt: new Date(),
        updatedAt: new Date(),
        publishedAt: new Date(),
        published: Math.random() > 0.5,
        authorId: Math.floor(Math.random() * (authors?.data?.length || 3) + 1),
      })
      .then(() => books.refetch());

  const addNewAuthor = () =>
    createAuthor
      .mutateAsync({
        name: `Random Author ${Math.floor(Math.random() * 500) + 1}`,
        email: `author${Math.floor(Math.random() * 500)}@gmail.com`,
        password: `${Math.floor(Math.random() * 1000)}author123`,
        birthCounty: Math.random() > 0.5 ? "Brazil" : "USA",
      })
      .then(() => authors.refetch());

  return (
    <>
      <Head>
        <title>{helloText}</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="container mx-auto flex min-h-screen flex-col items-center p-4">
        <h1 className="text-5xl font-extrabold leading-normal text-gray-700 md:text-[5rem]">
          {helloText}
        </h1>
        <div className="flex flex-row justify-between gap-32">
          <div className="w-1/2">
            <div className="mb-4 flex items-end justify-between gap-4">
              <p className="text-2xl text-gray-700">Books</p>
              <button
                className="rounded border border-black bg-gray-700 p-1 text-white"
                onClick={() => addNewBook()}
              >
                Add new
              </button>
            </div>
            {books?.data?.map((book) => (
              <InfoCard
                key={book.id + book.title}
                title={book.title}
                additionalProps={[
                  `BookId: ${book.id.toString()}`,
                  `AuthorId: ${book.authorId.toString()}`,
                  `Published at: ${book?.publishedAt?.toString() || ""}`,
                  `Created at: ${book?.createdAt?.toString()}`,
                ]}
              />
            ))}
          </div>
          <div className="w-1/2">
            <div className="mb-4 flex items-end justify-between gap-4">
              <p className="text-2xl text-gray-700">Authors</p>
              <button
                className="rounded border border-black bg-gray-700 p-1 text-white"
                onClick={() => addNewAuthor()}
              >
                Add new
              </button>
            </div>
            {authors?.data?.map((author) => (
              <InfoCard
                key={author.id + author.name}
                title={author.name}
                additionalProps={[
                  `AuthorId: ${author.id.toString()}`,
                  `Email: ${author.email}`,
                  `Birth Country: ${author.birthCounty}`,
                ]}
              />
            ))}
          </div>
        </div>
      </main>
    </>
  );
};

export default Home;

type InfoCardProps = {
  title: string;
  additionalProps: string[];
};

const InfoCard = ({ title, additionalProps }: InfoCardProps) => {
  return (
    <section className="mb-4 flex flex-col justify-center rounded border-2 border-gray-500 p-6 shadow-xl duration-500 motion-safe:hover:scale-105">
      <h2 className="text-lg text-gray-700">{title}</h2>
      <ul className="mt-3">
        {additionalProps.map((prop, index) => (
          <li key={index + prop} className="text-sm text-gray-600">
            {prop}
          </li>
        ))}
      </ul>
    </section>
  );
};
